#!/usr/bin/env sh
set -eo pipefail

# Set the layersdir variable to be the first argument from the build lifecycle
layersdir=$1
gradle_task=${TARGET:=assemble} 
gradle_profile=${PROFILE:=default}
echo "---> Java gradle buildpack" 
echo "---> Print environment info"
env
echo "---> Print gradle info"
gradle -version

if [[ -d  $layersdir/cache.toml ]] ; then
    echo "---> Reusing cache"
else
    echo "---> Creating cache dir"
    mkdir -p $layersdir/cache/
    echo -e "cache = true" > "$layersdir/cache.toml"
fi
mkdir -p $layersdir/cache/userhome
ln -s $layersdir/cache/userhome $HOME/.gradle
mkdir -p $layersdir/cache/projectcache

echo "building app jars"
mkdir -p $layersdir/apps

gradle --project-cache-dir $layersdir/cache/projectcache -i  --no-daemon -Dspring.profiles.active=${PROFILE} clean ${TARGET} 

cp build/libs/*.jar $layersdir/apps/

echo -e 'launch = true' > $layersdir/apps.toml

if [[ -f entrypoint.sh  ]]; then
  echo "entrypoint.sh is found"
  cp entrypoint.sh $layersdir/apps/
  chmod a+x $layersdir/apps/entrypoint.sh
  # Set default start command
  echo "processes = [{ type = \"web\", command = \"cd $layersdir/apps/; ./entrypoint.sh\"}]" > "$layersdir/launch.toml"
else
  echo "entrypoint.sh is not found"
  target_dir=$layersdir/apps/
  for jar_file in $(find "$target_dir" -maxdepth 1 -name "*.jar" -type f); do
    cat >> "${layers_dir}/launch.toml" <<EOL
[[processes]]
type = "web"
command = "java -jar ${jar_file}"
EOL
    break;
  done
fi

gradle --project-cache-dir $layersdir/cache/projectcache -i  --no-daemon -Dspring.profiles.active=${PROFILE} clean
